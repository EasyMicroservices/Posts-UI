@page "/FilterArticlesList"
@using EasyMicroservices.UI.Posts.ViewModels.Articles;
@using MudBlazor;
@using Post.GeneratedServices
@inject FilterArticlesListViewModel viewModel;
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudDataGrid T="ArticleContract" ServerData="LoadGridData" MultiSelection="true" OverscanCount="viewModel.TotalCount" Items="viewModel.Articles" SortMode="SortMode.Multiple" Filterable="true"
             Hideable="true">
    <ToolBarContent>
        <MudStack AlignItems="AlignItems.Center" Row="true" Spacing="5">
            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="(arg) => ShowAddDialog()" />
            <MudText Typo="Typo.h6" mar>Articles</MudText>
        </MudStack>
        
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Search" Color="Color.Primary" Disabled="viewModel.IsBusy" OnClick="(arg) => viewModel.SearchCommand.Execute(null)">
            @if (viewModel.IsBusy)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
                <MudText>Search</MudText>
            }
        </MudButton>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="ArticleContract" />
        <PropertyColumn Property="x => x.Id" />
        <PropertyColumn Property="x => x.Title" />
        <PropertyColumn Property="x => x.Summary" />
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="(arg) => ShowUpdateDialog(context.Item)" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="(arg) => ShowDeleteDialog(context.Item)" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="ArticleContract" />
    </PagerContent>
</MudDataGrid>
<MudDialog Class="@DialogClass" @bind-IsVisible="IsShowEditDialog" Options="DialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" /> @_AddOrUpdateTitle
        </MudText>
    </TitleContent>
    <DialogContent>
        <AddOrUpdateArticle @ref="AddOrUpdateArticleView" />
    </DialogContent>
</MudDialog>
<MudDialog Class="@DialogClass" @ref="deleteDialog" @bind-IsVisible="IsShowDeleteDialog">
    <TitleContent>
        <MudText>
            Delete Article
        </MudText>
    </TitleContent>
    <DialogContent>
        Do you really want to delete these records? This process cannot be undone.
    </DialogContent>
    <DialogActions>
        @if (!viewModel.IsBusy)
        {
            <MudButton OnClick="() => deleteDialog.Close()">Cancel</MudButton>
        }
        <MudButton Color="Color.Error" Variant="Variant.Filled" Disabled="viewModel.IsBusy" OnClick="()=>DoDelete()">
            @if (viewModel.IsBusy)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Deleting</MudText>
            }
            else
            {
                <MudText>Delete</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>
<style>
    .dialog-background-class {
        backdrop-filter: blur(10px);
    }
</style>
@code {
    AddOrUpdateArticle AddOrUpdateArticleView { get; set; }
    MudDialog deleteDialog;
    DialogOptions DialogOptions = new DialogOptions()
        {
            ClassBackground = "dialog-background-class",
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.ExtraSmall
        };
    string DialogClass = "invisible";
    private string _searchString;
    private string _AddOrUpdateTitle;
    private string _AddOrUpdatedMessage;

    bool IsShowEditDialog = true;
    bool IsShowDeleteDialog = true;
    protected override async Task OnInitializedAsync()
    {
        viewModel.BindPropertyChanged(StateHasChanged);
        await base.OnInitializedAsync();
    }

    private async Task<GridData<ArticleContract>> LoadGridData(GridState<ArticleContract> state)
    {
        viewModel.Index = state.Page * 10;
        viewModel.Length = state.PageSize;
        await viewModel.SearchCommand.ExecuteAsync(null);
        GridData<ArticleContract> data = new()
            {
                Items = viewModel.Articles,
                TotalItems = viewModel.TotalCount
            };

        return data;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        IsShowEditDialog = false;
        IsShowDeleteDialog = false;
        DialogClass = "visible";
        return base.OnAfterRenderAsync(firstRender);
    }

    void ShowUpdateDialog(ArticleContract articleContract)
    {
        _AddOrUpdateTitle = "Update Article";
        _AddOrUpdatedMessage = "Article updated.";
        AddOrUpdateArticleView.ViewModel.UpdateArticleContract = articleContract;
        ShowAddOrUpdateDialog();
    }

    void ShowAddDialog()
    {
        _AddOrUpdateTitle = "Add Article";
        _AddOrUpdatedMessage = "Article added.";
        AddOrUpdateArticleView.ViewModel.Clear();
        ShowAddOrUpdateDialog();
    }

    void ShowAddOrUpdateDialog()
    {
        AddOrUpdateArticleView.ViewModel.OnSuccess = () =>
        {
            IsShowEditDialog = false;
            viewModel.SearchCommand.Execute(null);
            Snackbar.Add(_AddOrUpdatedMessage, Severity.Success);
        };
        IsShowEditDialog = true;
    }

    void ShowDeleteDialog(ArticleContract articleContract)
    {
        viewModel.SelectedArticleContract = articleContract;
        IsShowDeleteDialog = true;
    }

    void DoDelete()
    {
        IsShowDeleteDialog = true;
        viewModel.OnDelete = (o) =>
        {
            IsShowDeleteDialog = false;
            StateHasChanged();
            Snackbar.Add("Article deleted!", Severity.Success);
        };
        viewModel.DeleteCommand.Execute(viewModel.SelectedArticleContract);
    }

    void CloseDeleteDialog(ArticleContract articleContract)
    {
        deleteDialog.Close();
    }
}
